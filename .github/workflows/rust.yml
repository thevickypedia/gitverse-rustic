name: Rust build & test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.setter.outputs.release }}
      pkg_name: ${{ steps.setter.outputs.pkg_name }}
      asset_name: ${{ steps.setter.outputs.asset_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Package Name
        run: |
          name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          echo "Package Name: $name"
          echo "pkg_name=$name" >> $GITHUB_ENV
          echo "asset_name=asset_$name" >> $GITHUB_ENV
        shell: bash
      - name: Set Release Flag  # Release flag is set only for a push on main branch
        if: github.event_name == 'push'
        run: |
          current_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          latest_version=$(curl -s https://crates.io/api/v1/crates/${{ env.pkg_name }} | jq -r '.versions[0].num')
          echo "Current Package Version: ${current_version}"
          echo "Latest Package Version: ${latest_version}"
          if [ "$latest_version" != "$current_version" ]; then
            echo "Version has changed. Setting release flag to true."
            echo "release=true" >> $GITHUB_ENV
          else
            echo "Version has not changed. Setting release flag to false."
            echo "release=false" >> $GITHUB_ENV
          fi
          echo "pkg_version=$current_version" >> $GITHUB_ENV
        shell: bash
      - name: Build
        run: |
          if [ "${{ env.release }}" == "true" ]; then
            cargo build --release
          else
            cargo build --verbose
          fi
      - name: Run tests
        run: |
          if [ "${{ env.release }}" == "true" ]; then
            cargo test
          else
            cargo test --verbose
          fi
      - uses: actions/upload-artifact@v3
        with:
          name: arty-upload
          path: target/*
      - name: Set outputs
        id: setter
        run: |
          echo "release=${{ env.release }}" >> $GITHUB_OUTPUT
          echo "pkg_name=${{ env.pkg_name }}" >> $GITHUB_OUTPUT
          echo "asset_name=${{ env.asset_name }}" >> $GITHUB_OUTPUT
  release:
    needs: build_and_test
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.setter.outputs.release_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Load env vars
        run: |
          echo release=${{needs.build_and_test.outputs.release}} >> $GITHUB_ENV
          echo pkg_name=${{needs.build_and_test.outputs.pkg_name}} >> $GITHUB_ENV
          echo asset_name=${{needs.build_and_test.outputs.asset_name}} >> $GITHUB_ENV
      - name: Create New Release
        if: env.release == 'true'
        run: |
          release_tag="v${{ env.pkg_version }}"
          cargo_prerelease=("alpha" "beta" "rc")
          prerelease=false
          for cargo_pre in "${cargo_prerelease[@]}"; do
            if [[ $pkg_version == *"$cargo_pre"* ]]; then
              prerelease=true
              break
            fi
          done
          commit_msg="Release compiled executable for $release_tag"
          release_data="{\"tag_name\":\"$release_tag\",\"name\":\"$release_tag\",\"body\":\"$commit_msg\",\"draft\":false,\"prerelease\":$prerelease}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$release_data" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          release_id=$(echo $response | jq -r .id)
          echo "Release ID: $release_id"
          echo "release_id=$release_id" >> $GITHUB_ENV
        shell: bash
      - name: Set outputs
        id: setter
        run: echo "release_id=${{ env.release_id }}" >> $GITHUB_OUTPUT
  upload_artifact:
    needs:
      - build_and_test
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: arty-download
          path: target/*
      - name: Load env vars
        # todo: check if asset name works without wrapping with {}
        run: |
          echo release_id=${{needs.release.outputs.release_id}} >> $GITHUB_ENV
          echo release=${{needs.build_and_test.outputs.release}} >> $GITHUB_ENV
          echo asset_name=${{needs.build_and_test.outputs.asset_name}} >> $GITHUB_ENV
      - name: Copy Compiled Executable
        if: env.release == 'true'
        run: |
          src_dir="target/release"
          if [ -f "$src_dir/${{ env.pkg_name }}" ]; then
            cp "$src_dir/${{ env.pkg_name }}" "$asset_name"
            echo "Copied '${{ env.pkg_name }}' as '$asset_name' to $(pwd)"
          else
            echo "The file ${{ env.pkg_name }} does not exist in $src_dir."
          fi
        shell: bash
      - name: Upload Asset to Release
        if: env.release == 'true'
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @"$asset_name" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=$asset_name"
        shell: bash
  publish_crate:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: arty-download
          path: target/*
      - name: Load env vars
        run: |
          echo release=${{needs.build_and_test.outputs.release}} >> $GITHUB_ENV
      - name: Release Crate
        if: env.release == 'true'
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish --allow-dirty  # Set allow-dirty since building will create a /target folder that will be uncommitted in git
        shell: bash
